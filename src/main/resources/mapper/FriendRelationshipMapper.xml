<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xm.game9.mapper.FriendRelationshipMapper">

    <!-- 基础结果映射 -->
    <resultMap id="BaseResultMap" type="com.xm.game9.model.domain.FriendRelationship">
        <id column="relationshipId" property="relationshipId"/>
        <result column="userId" property="userId"/>
        <result column="friendId" property="friendId"/>
        <result column="friendStatus" property="friendStatus"/>
        <result column="friendRemark" property="friendRemark"/>
        <result column="friendCreateTime" property="friendCreateTime"/>
        <result column="friendUpdateTime" property="friendUpdateTime"/>
        <result column="friendIsDeleted" property="friendIsDeleted"/>
    </resultMap>

    <sql id="Base_Column_List">
        relationshipId
        ,userId,friendId,
        friendStatus,friendRemark,
        friendCreateTime,friendUpdateTime,friendIsDeleted
    </sql>

    <!-- 好友视图映射 -->
    <resultMap id="FriendVOResultMap" type="com.xm.game9.model.vo.FriendVO">
        <result column="friendId" property="friendId"/>
        <result column="userName" property="userName"/>
        <result column="userNickname" property="userNickname"/>
        <result column="userAvatar" property="userAvatar"/>
        <result column="userProfile" property="userProfile"/>
        <result column="friendRemark" property="remark"/>
        <result column="friendCreateTime" property="createTime"/>
    </resultMap>

    <!-- 好友申请VO映射 -->
    <resultMap id="FriendRequestVOResultMap" type="com.xm.game9.model.vo.FriendRequestVO">
        <result column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="avatar" property="avatar"/>
        <result column="remark" property="remark"/>
        <result column="status" property="status"/>
        <result column="createTime" property="createTime"/>
    </resultMap>

    <!-- 获取好友列表 -->
    <select id="selectFriendsByUserId" resultMap="FriendVOResultMap">
        SELECT u.userId as friendId,
        u.userName,
        u.userNickname,
        u.userAvatar,
        u.userProfile,
        fr.friendRemark,
        fr.friendCreateTime
        FROM user u
        JOIN friendRelationship fr ON u.userId = fr.friendId
        WHERE fr.userId = #{userId}
        AND fr.friendStatus = 1
        AND fr.friendIsDeleted = 0
    </select>

    <!-- 获取待处理的好友请求 -->
    <select id="selectPendingRequests" resultMap="FriendVOResultMap">
        SELECT u.userId as friendId,
        u.userName,
        u.userNickname,
        u.userAvatar,
        u.userProfile,
        fr.friendRemark,
        fr.friendCreateTime
        FROM friendRelationship fr
        JOIN user u ON fr.userId = u.userId
        WHERE fr.friendId = #{userId}
        AND fr.friendStatus = 0
        AND fr.friendIsDeleted = 0
    </select>

    <!-- 撤回好友请求 -->
    <update id="withdrawRequest">
        UPDATE friendRelationship
        SET friendIsDeleted = 1,
        friendUpdateTime = NOW()
        WHERE userId = #{userId}
        AND friendId = #{friendId}
        AND friendStatus = 0
        AND friendIsDeleted = 0
    </update>

    <!-- 搜索好友 -->
    <select id="searchFriends" resultMap="FriendVOResultMap">
        SELECT u.userId as friendId,
        u.userName,
        u.userNickname,
        u.userAvatar,
        u.userProfile,
        fr.friendRemark,
        fr.friendCreateTime
        FROM friendRelationship fr
        JOIN user u ON fr.friendId = u.userId
        WHERE fr.userId = #{userId}
        AND fr.friendStatus = 1
        AND fr.friendIsDeleted = 0
        AND (
        u.userName LIKE CONCAT('%', #{keyword}, '%')
        OR u.userNickname LIKE CONCAT('%', #{keyword}, '%')
        OR fr.friendRemark LIKE CONCAT('%', #{keyword}, '%')
        )
    </select>

    <!-- 添加好友请求 -->
    <insert id="addFriendRequest">
        INSERT INTO friendRelationship (userId,
        friendId,
        friendStatus,
        friendRemark,
        friendCreateTime,
        friendUpdateTime,
        friendIsDeleted)
        VALUES (#{userId},
        #{friendId},
        0,
        #{remark},
        NOW(),
        NOW(),
        0)
    </insert>

    <!-- 接受好友请求 -->
    <update id="acceptFriendRequest">
        UPDATE friendRelationship
        SET friendStatus = 1,
        friendUpdateTime = NOW()
        WHERE userId = #{userId}
        AND friendId = #{friendId}
        AND friendStatus = 0
        AND friendIsDeleted = 0
    </update>

    <!-- 拒绝好友请求 -->
    <update id="rejectFriendRequest">
        UPDATE friendRelationship
        SET friendStatus = 2,
        friendUpdateTime = NOW()
        WHERE userId = #{userId}
        AND friendId = #{friendId}
        AND friendStatus = 0
        AND friendIsDeleted = 0
    </update>

    <!-- 删除好友 -->
    <update id="deleteFriend">
        UPDATE friendRelationship
        SET friendStatus = 3,
        friendUpdateTime = NOW()
        WHERE (
        (userId = #{userId} AND friendId = #{friendId})
        OR (userId = #{friendId} AND friendId = #{userId})
        )
        AND friendStatus = 1
        AND friendIsDeleted = 0
    </update>

    <!-- 更新好友备注 -->
    <update id="updateFriendRemark">
        UPDATE friendRelationship
        SET friendRemark = #{remark},
        friendUpdateTime = NOW()
        WHERE userId = #{userId}
        AND friendId = #{friendId}
        AND friendStatus = 1
        AND friendIsDeleted = 0
    </update>

    <!-- 检查好友关系是否存在 -->
    <select id="checkFriendRelationship" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM friendRelationship
        WHERE (
        (userId = #{userId} AND friendId = #{friendId})
        OR (userId = #{friendId} AND friendId = #{userId})
        )
        AND friendIsDeleted = 0
    </select>

    <!-- 检查是否有待处理的好友请求 -->
    <select id="checkPendingRequest" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM friendRelationship
        WHERE userId = #{userId}
        AND friendId = #{friendId}
        AND friendStatus = 0
        AND friendIsDeleted = 0
    </select>

    <!-- 获取收到的好友申请 -->
    <select id="selectReceivedRequests" resultMap="FriendRequestVOResultMap">
        SELECT fr.relationshipId as id,
        u.userName as username,
        u.userAvatar as avatar,
        fr.friendRemark as remark,
        fr.friendStatus as status,
        fr.friendCreateTime as createTime
        FROM friendRelationship fr
        JOIN user u ON fr.userId = u.userId
        WHERE fr.friendId = #{userId}
        AND fr.friendStatus = 0
        AND fr.friendIsDeleted = 0
    </select>

    <!-- 获取我发出的好友申请 -->
    <select id="selectSentRequests" resultMap="FriendRequestVOResultMap">
        SELECT fr.relationshipId as id,
        u.userName as username,
        u.userAvatar as avatar,
        fr.friendRemark as remark,
        fr.friendStatus as status,
        fr.friendCreateTime as createTime
        FROM friendRelationship fr
        JOIN user u ON fr.friendId = u.userId
        WHERE fr.userId = #{userId}
        AND fr.friendStatus = 0
        AND fr.friendIsDeleted = 0
    </select>
</mapper>